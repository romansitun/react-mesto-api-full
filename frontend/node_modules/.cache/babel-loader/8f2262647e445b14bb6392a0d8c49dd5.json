{"ast":null,"code":"class Api {\n  constructor(data) {\n    this._baseUrl = data.serverUrl;\n  }\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getInitialData() {\n    return Promise.all([this.getUserInfo(), this.getInitialCards()]);\n  }\n\n  getUserInfo(jwt) {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => this._handleResponse(res));\n  }\n\n  getInitialCards(jwt) {\n    return fetch(`${this._baseUrl}cards`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      method: 'GET'\n    }).then(res => this._handleResponse(res));\n  }\n\n  editProfile(jwt) {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._handleResponse(res));\n  }\n\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._handleResponse(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => this._handleResponse(res));\n  }\n\n  addCardLike(data) {\n    return fetch(`${this._baseUrl}cards/${data}/likes`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => this._handleResponse(res));\n  }\n\n  deleteCardLike(data) {\n    return fetch(`${this._baseUrl}cards/${data}/likes`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => this._handleResponse(res));\n  }\n\n  editAvatar(data) {\n    return fetch(`${this._baseUrl}users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._handleResponse(res));\n  }\n\n  changeLikeCardStatus(data, isLiked) {\n    return fetch(`${this._baseUrl}cards/${data}/likes`, {\n      method: !isLiked ? 'DELETE' : 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => this._handleResponse(res));\n  }\n\n}\n\nconst api = new Api({\n  serverUrl: 'http://localhost:3000/',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","data","_baseUrl","serverUrl","_handleResponse","res","ok","json","Promise","reject","status","getInitialData","all","getUserInfo","getInitialCards","jwt","fetch","method","credentials","headers","then","editProfile","localStorage","getItem","body","JSON","stringify","name","about","addNewCard","link","deleteCard","cardId","addCardLike","deleteCardLike","editAvatar","avatar","changeLikeCardStatus","isLiked","api"],"sources":["C:/Users/Роман/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\r\n    constructor(data) {\r\n        this._baseUrl = data.serverUrl;\r\n    }\r\n\r\n    _handleResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        }\r\n    }\r\n\r\n    getInitialData() {\r\n        return Promise.all([this.getUserInfo(), this.getInitialCards()])\r\n    }\r\n\r\n    getUserInfo(jwt) {\r\n        return fetch(`${this._baseUrl}users/me`, {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${jwt}`,\r\n            }\r\n        })\r\n            .then((res) => this._handleResponse(res)\r\n            )\r\n\r\n    }\r\n\r\n    getInitialCards(jwt) {\r\n        return fetch(`${this._baseUrl}cards`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${jwt}`,\r\n            },\r\n            method: 'GET',\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n\r\n    editProfile(jwt) {\r\n        return fetch(`${this._baseUrl}users/me`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n            },\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                about: data.about,\r\n            })\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n\r\n    addNewCard(data) {\r\n        return fetch(`${this._baseUrl}cards`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n            },\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                link: data.link,\r\n            })\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n\r\n    deleteCard(cardId) {\r\n        return fetch(`${this._baseUrl}cards/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n            }\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n\r\n    addCardLike(data) {\r\n        return fetch(`${this._baseUrl}cards/${data}/likes`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n            }\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n\r\n    deleteCardLike(data) {\r\n        return fetch(`${this._baseUrl}cards/${data}/likes`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n            }\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n\r\n    editAvatar(data) {\r\n        return fetch(`${this._baseUrl}users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n            },\r\n            body: JSON.stringify({\r\n                avatar: data.avatar,\r\n            })\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n\r\n    changeLikeCardStatus(data, isLiked) {\r\n        return fetch(`${this._baseUrl}cards/${data}/likes`, {\r\n            method: !isLiked ? 'DELETE' : 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n            }\r\n        })\r\n            .then((res) => this._handleResponse(res))\r\n    }\r\n}\r\n\r\n\r\nconst api = new Api({\r\n    serverUrl: 'http://localhost:3000/',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\r\n    },\r\n});\r\n\r\nexport default api;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}